const {Markup} = require("telegraf");
const dbService = require("./dbService");

module.exports = class PollSender {
    static async sendMessageToGroups(bot) {

        const curDate = `${new Date().getUTCFullYear()}/${new Date().getUTCMonth() + 1}/${new Date().getUTCDate()}`;
        const answeredToday = (await dbService.getUserChecksByDate(curDate));
        const groups = (await dbService.getGroups());

        const usersWithSentChecks = [];

        for (const group of groups) {

            const msgText = await this.getMessageContent(bot, group.group_tgid, curDate, answeredToday);

            const pollMsgId = await bot.telegram.sendMessage(group.group_tgid, msgText, {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                    [Markup.button.url('–ü–æ—á–∞—Ç–∏', 'https://t.me/iamsafe_bot')],
                ])
            });

            const groupUsers = await dbService.getUsersWithGroup(group.group_tgid);

            await dbService.addPollToGroup(pollMsgId.message_id, group.group_tgid);

            for(const user of groupUsers) {
                const chatId = user.user_tgid;
                if(!usersWithSentChecks.includes(chatId)) {
                    await bot.telegram.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç!\n–í–∏ –Ω–∞ –∑–≤'—è–∑–∫—É? üì±`, {
                        parse_mode: 'HTML',
                        ...Markup.inlineKeyboard([
                            Markup.button.callback('–¢–∞–∫ ‚úÖ', 'yesIAmSafe')
                        ])
                    });
                    usersWithSentChecks.push(chatId);
                }
            }
        }
    }

    static async editGroupPoll(bot, groupId)
    {
        const curDate = `${new Date().getUTCFullYear()}/${new Date().getUTCMonth() + 1}/${new Date().getUTCDate()}`;
        const answeredToday = (await dbService.getUserChecksByDate(curDate));

        const msgText = await this.getMessageContent(bot, groupId, curDate, answeredToday);
        const chatId = ((await dbService.getGroupByTelegramId(groupId))[0].group_pollsMsgIds.slice(-1))[0]; // get latest poll msg id

        await bot.telegram.editMessageText(groupId, chatId, null, msgText, {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.url('–ü–æ—á–∞—Ç–∏', 'https://t.me/iamsafe_bot')],
            ])
        });
    }

    static async getMessageContent(bot, groupTgId, curDate, answeredToday) {
        const groupRegisteredUsers = (await dbService.getUsersWithGroup(groupTgId));
        const amountInGroup = await bot.telegram.getChatMembersCount(groupTgId) - 1; // chat members without bot
        const amountConnected = groupRegisteredUsers.length;
        const amountAnswered = answeredToday.length;

        const skipped = await dbService.getNotContactedUsers(groupRegisteredUsers, answeredToday);

        const answeredGroupByPlace = await dbService.getAnsweredByDateGroupByPlace(curDate);

        let answeredGroupByPlaceString = '';
        answeredGroupByPlace.forEach(region => {
            answeredGroupByPlaceString += `<b>${region.place}:</b> ${region.people.join()}\n`;
        });

        let skippedUsersString = '';
        for (let skippedTgId of skipped) {
            const skippedUser = (await dbService.getUserByTelegramId(skippedTgId))[0];
            skippedUsersString += `${'‚ö†Ô∏è'.repeat(skippedUser.user_skippedPolls)} - ${skippedUser.user_firstname}\n`;
        }

        return '<b>–°—Ç–∞—Ä—Ç—É–≤–∞–ª–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è! –í–∞–º –≤ –±–æ—Ç –ø—Ä–∏–π—à–ª–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.</b>\n' +
            `‚úÖ –í–∂–µ –≤–∑—è–ª–æ —É—á–∞—Å—Ç—å –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ (${amountAnswered}):\n` +
            `${answeredGroupByPlaceString}` +
            `\n` +
            '<b>–ü–æ–∫–∏ –Ω–µ –≤–∏–π—à–ª–∏ –Ω–∞ –∑–≤‚Äô—è–∑–æ–∫:</b>\n' +
            '(–∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–∫–æ–Ω–æ–∫ ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω—å)\n' +
            `${skippedUsersString}` +
            `\n` +
            `‚è∞ –£—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø–∏, —è–∫—ñ –Ω–µ –ø–æ—á–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º: <b>${amountInGroup - amountConnected}</b>\n` +
            '(—â–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Start)';
    }
}