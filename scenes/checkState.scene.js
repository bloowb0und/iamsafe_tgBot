const {Scenes, Markup, session} = require("telegraf");
const dbService = require("../dbService");
const cities = require("../info/cities");

module.exports = new Scenes.WizardScene(
    'checkStateWizard',
    async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.editMessageReplyMarkup(null);

        await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? üìç', {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª', 'vinnitsaReg'), Markup.button.callback('–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª', 'volynReg'), Markup.button.callback('–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª', 'dniproReg')],
                [Markup.button.callback('–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª', 'donetskReg'), Markup.button.callback('–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª', 'jitomirReg'), Markup.button.callback('–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª', 'zakarpatskaReg')],
                [Markup.button.callback('–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª', 'zaporijaReg'), Markup.button.callback('–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª', 'ivanofrankReg'), Markup.button.callback( '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª', 'kyivReg')],
                [Markup.button.callback('–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª', 'kirovogradReg'), Markup.button.callback('–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª', 'luganskReg'), Markup.button.callback( '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª', 'lvivReg')],
                [Markup.button.callback('–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª', 'mykolaivReg'), Markup.button.callback('–û–¥–µ—Å—å–∫–∞ –æ–±–ª', 'odessaReg'), Markup.button.callback( '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª', 'poltavaReg')],
                [Markup.button.callback('–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª', 'rivneReg'), Markup.button.callback('–°—É–º—Å—å–∫–∞ –æ–±–ª', 'sumiReg'), Markup.button.callback( '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª', 'ternopilReg')],
                [Markup.button.callback('–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª', 'kharkivReg'), Markup.button.callback('–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª', 'khersonReg'), Markup.button.callback( '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª', 'hmelnytskReg')],
                [Markup.button.callback('–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª', 'cherkassyReg'), Markup.button.callback('–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª', 'chernivtsiReg'), Markup.button.callback( '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª', 'chernihivReg')],
                [Markup.button.callback('–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º', 'abroad')]
            ]).oneTime()
        });

        return ctx.wizard.next();
    },
    async (ctx) => {
        await ctx.answerCbQuery()
        await ctx.editMessageReplyMarkup(null);
        const callbackAnswer = ctx.update.callback_query.data;

        ctx.session.region = '';
        ctx.session.city = '';

        switch (callbackAnswer)
        {
            case 'abroad':
                ctx.session.region = '–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º';
                return ctx.wizard.steps[2](ctx);
                break;

            case 'vinnitsaReg':
                ctx.session.region = '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –í—ñ–Ω–Ω–∏—Ü—è', 'vinnytsa'), Markup.button.callback('–º. –ñ–º–µ—Ä–∏–Ω–∫–∞', 'jmerinka'), Markup.button.callback('–º. –ö–æ–∑—è—Ç–∏–Ω', 'kozyatin')],
                        [Markup.button.callback('–º. –õ–∞–¥–∏–∂–∏–Ω', 'ladijn'), Markup.button.callback('–º. –•–º—ñ–ª—å–Ω–∏–∫', 'hmilnik'), Markup.button.callback('–º. –ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π', 'mogilev-podilskiy')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'volynReg':
                ctx.session.region = '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –õ—É—Ü—å–∫', 'lutsk'), Markup.button.callback('–º. –ö–æ–≤–µ–ª—å', 'kovel')],
                        [Markup.button.callback('–º. –í–æ–ª–æ–¥–∏–º–∏—Ä-–í–æ–ª–∏–Ω—Å—å–∫–∏–π', 'volodymyr-volynskyi'), Markup.button.callback('–º. –ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫', 'novovolynsk')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'dniproReg':
                ctx.session.region = '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –î–Ω—ñ–ø—Ä–æ', 'dnipro'), Markup.button.callback('–º. –í—ñ–ª—å–Ω–æ–≥—ñ—Ä—Å—å–∫', 'vilnogirsk'), Markup.button.callback('–º. –ö–∞–º`—è–Ω—Å—å–∫–µ', 'kamyanske')],
                        [Markup.button.callback('–º. –ñ–æ–≤—Ç—ñ –í–æ–¥–∏', 'jovti-vodi'), Markup.button.callback('–º. –ö—Ä–∏–≤–∏–π –†—ñ–≥', 'krivii-rig'), Markup.button.callback('–º. –ú–∞—Ä–≥–∞–Ω–µ—Ü—å', 'marganec')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'donetskReg':
                ctx.session.region = '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –î–æ–Ω–µ—Ü—å–∫', 'donetsk'), Markup.button.callback('–º. –ê–≤–¥—ñ—ó–≤–∫–∞', 'avdiivka'), Markup.button.callback('–º. –ë–∞—Ö–º—É—Ç', 'bahmut')],
                        [Markup.button.callback('–º. –ì–æ—Ä–ª—ñ–≤–∫–∞', 'gorlivka'), Markup.button.callback('–º. –î–µ–±–∞–ª—å—Ü–µ–≤–µ', 'debalceve'), Markup.button.callback('–º. –¢–æ—Ä–µ—Ü—å–∫', 'toreck')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'jitomirReg':
                ctx.session.region = '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ñ–∏—Ç–æ–º–∏—Ä', 'jitomir'), Markup.button.callback('–º. –ë–µ—Ä–¥–∏—á—ñ–≤', 'berdichiv'), Markup.button.callback('–º. –ö–æ—Ä–æ—Å—Ç–µ–Ω—å', 'korosten')],
                        [Markup.button.callback('–º. –ú–∞–ª–∏–Ω', 'malin'), Markup.button.callback('–º. –ù–æ–≤–æ–≥—Ä–∞–¥-–í–æ–ª–∏–Ω—Å—å–∫–∏–π', 'novograd-volynskyi')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'zakarpatskaReg':
                ctx.session.region = '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –£–∂–≥–æ—Ä–æ–¥', 'ujgorod'), Markup.button.callback('–º. –ë–µ—Ä–µ–≥–æ–≤–µ', 'beregove'), Markup.button.callback('–º. –ú—É–∫–∞—á–µ–≤–æ', 'mukachevo')],
                        [Markup.button.callback('–º. –•—É—Å—Ç', 'hust'), Markup.button.callback('–º. –ß–æ–ø', 'chop')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'zaporijaReg':
                ctx.session.region = '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ó–∞–ø–æ—Ä—ñ–∂–∂—è', 'zaporija'), Markup.button.callback('–º. –ë–µ—Ä–¥—è–Ω—Å—å–∫', 'berdiansk'), Markup.button.callback('–º. –ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å', 'melitopol')],
                        [Markup.button.callback('–º. –¢–æ–∫–º–∞–∫', 'tokmak'), Markup.button.callback('\t–º. –ï–Ω–µ—Ä–≥–æ–¥–∞—Ä', 'energodar')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'ivanofrankReg':
                ctx.session.region = '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', 'ivano-frankivsk'), Markup.button.callback('–º. –ë–æ–ª–µ—Ö—ñ–≤', 'bolehiv'), Markup.button.callback('–º. –ë—É—Ä—à—Ç–∏–Ω', 'burshtin')],
                        [Markup.button.callback('–º. –ö–∞–ª—É—à', 'kalush'), Markup.button.callback('–º. –ö–æ–ª–æ–º–∏—è', 'kolomya'), Markup.button.callback('–º. –Ø—Ä–µ–º—á–µ', 'yaremche')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'kyivReg':
                ctx.session.region = '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ö–∏—ó–≤', 'kyiv'), Markup.button.callback('–º. –ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞', 'bila-cerkva'), Markup.button.callback('–º. –ë–µ—Ä–µ–∑–∞–Ω—å', 'berezan')],
                        [Markup.button.callback('–º. –ë–æ—Ä–∏—Å–ø—ñ–ª—å', 'boryspil'), Markup.button.callback('–º. –ë—Ä–æ–≤–∞—Ä–∏', 'brovari'), Markup.button.callback('–º. –í–∞—Å–∏–ª—å–∫—ñ–≤', 'vasilkyv')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'kirovogradReg':
                ctx.session.region = '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', 'kropyvnitskiy'), Markup.button.callback('–º. –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ—è', 'oleksandria')],
                        [Markup.button.callback('–º. –°–≤—ñ—Ç–ª–æ–≤–æ–¥—Å—å–∫', 'svitlovodsk'), Markup.button.callback('–º. –ó–Ω–∞–º`—è–Ω–∫–∞', 'znamyanka')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'luganskReg':
                ctx.session.region = '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –õ—É–≥–∞–Ω—Å—å–∫', 'lugansk'), Markup.button.callback('–º. –ê–Ω—Ç—Ä–∞—Ü–∏—Ç', 'antracit'), Markup.button.callback('–º. –ë—Ä—è–Ω–∫–∞', 'bryanka')],
                        [Markup.button.callback('–º. –ì–æ–ª—É–±—ñ–≤–∫–∞', 'golubivka'), Markup.button.callback('–º. –ê–ª—á–µ–≤—Å—å–∫', 'alchevsk'), Markup.button.callback('–º. –°–æ—Ä–æ–∫–∏–Ω–µ', 'sorokine')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'lvivReg':
                ctx.session.region = '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –õ—å–≤—ñ–≤', 'lviv'), Markup.button.callback('–º. –ë–æ—Ä–∏—Å–ª–∞–≤', 'boryslav'), Markup.button.callback('–º. –î—Ä–æ–≥–æ–±–∏—á', 'drogobich')],
                        [Markup.button.callback('–º. –ú–æ—Ä—à–∏–Ω', 'morshin'), Markup.button.callback('–º. –ù–æ–≤–∏–π –†–æ–∑–¥—ñ–ª', 'novyi-rozdil'), Markup.button.callback('–º. –°–∞–º–±—ñ—Ä', 'sambir')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'mykolaivReg':
                ctx.session.region = '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ú–∏–∫–æ–ª–∞—ó–≤', 'mykolaiv'), Markup.button.callback('–º. –í–æ–∑–Ω–µ—Å–µ–Ω—Å—å–∫', 'voznesensk'), Markup.button.callback('–º. –û—á–∞–∫—ñ–≤', 'ochakiv')],
                        [Markup.button.callback('–º. –ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫', 'pervomaisk'), Markup.button.callback('–º. –Æ–∂–Ω–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫', 'ujnoukrainsk')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'odessaReg':
                ctx.session.region = '–û–¥–µ—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –û–¥–µ—Å–∞', 'odessa'), Markup.button.callback('–º. –ë–∞–ª—Ç–∞', 'balta'), Markup.button.callback('–º. –ë—ñ–ª—è—ó–≤–∫–∞', 'bilyaivka')],
                        [Markup.button.callback('–º. –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–∏–π', 'bolgorod-dnistrovskiy'), Markup.button.callback('–º. –Ü–∑–º–∞—ó–ª', 'izmail'), Markup.button.callback('–º. –ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫', 'chornomorsk')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'poltavaReg':
                ctx.session.region = '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ü–æ–ª—Ç–∞–≤–∞', 'poltava'), Markup.button.callback('–º. –ì–æ—Ä—ñ—à–Ω—ñ –ü–ª–∞–≤–Ω—ñ', 'gorisni-plavni'), Markup.button.callback('–º. –ì–∞–¥—è—á', 'gadych')],
                        [Markup.button.callback('–º. –ö—Ä–µ–º–µ–Ω—á—É–∫', 'kremenchyk'), Markup.button.callback('–º. –õ—É–±–Ω–∏', 'lybni'), Markup.button.callback('–º. –ú–∏—Ä–≥–æ—Ä–æ–¥', 'mirgorod')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'rivneReg':
                ctx.session.region = '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –†—ñ–≤–Ω–µ', 'rivne'), Markup.button.callback('–º. –î—É–±–Ω–æ', 'dybno')],
                        [Markup.button.callback('–º. –í–∞—Ä–∞—à', 'varash'), Markup.button.callback('–º. –û—Å—Ç—Ä–æ–≥', 'ostrog')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'sumiReg':
                ctx.session.region = '–°—É–º—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –°—É–º–∏', 'sumi'), Markup.button.callback('–º. –û—Ö—Ç–∏—Ä–∫–∞', 'oxtirka'), Markup.button.callback('–º. –ì–ª—É—Ö—ñ–≤', 'gluxiv')],
                        [Markup.button.callback('–º. –ö–æ–Ω–æ—Ç–æ–ø', 'konotop'), Markup.button.callback('–º. –õ–µ–±–µ–¥–∏–Ω', 'lebedin'), Markup.button.callback('–º. –†–æ–º–Ω–∏', 'romni')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'ternopilReg':
                ctx.session.region = '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å', 'ternopil'), Markup.button.callback('–º. –ß–æ—Ä—Ç–∫—ñ–≤', 'chortkiv')],
                        [Markup.button.callback('–º. –ë–µ—Ä–µ–∂–∞–Ω–∏', 'berezani'), Markup.button.callback('–º. –ö—Ä–µ–º–µ–Ω–µ—Ü—å', 'kremenets')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'kharkivReg':
                ctx.session.region = '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –•–∞—Ä–∫—ñ–≤', 'kharkiv'), Markup.button.callback('–º. –Ü–∑—é–º', 'izum'), Markup.button.callback('–º. –ö—É–ø`—è–Ω—Å—å–∫', 'kypyantsk')],
                        [Markup.button.callback('–º. –õ–æ–∑–æ–≤–∞', 'lozova'), Markup.button.callback('–º. –õ—é–±–æ—Ç–∏–Ω', 'lubotin'), Markup.button.callback('–º. –ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫–∏–π', 'pervomaiskiy')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'khersonReg':
                ctx.session.region = '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –•–µ—Ä—Å–æ–Ω', 'kherson'), Markup.button.callback('–º. –ì–æ–ª–∞ –ü—Ä–∏—Å—Ç–∞–Ω—å', 'gola-pristan')],
                        [Markup.button.callback('–º. –ö–∞—Ö–æ–≤–∫–∞', 'kaxovka'), Markup.button.callback('–º. –ù–æ–≤–∞ –ö–∞—Ö–æ–≤–∫–∞', 'nova-kaxovka')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'hmelnytskReg':
                ctx.session.region = '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', 'khmelnitsk'), Markup.button.callback('–º. –ù–µ—Ç—ñ—à–∏–Ω', 'nitishin'), Markup.button.callback('–º. –°–ª–∞–≤—É—Ç–∞', 'slavuta')],
                        [Markup.button.callback('–º. –ö–∞–º`—è–Ω–µ—Ü—å-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π', 'kamyanets-podolski'), Markup.button.callback('–º. –®–µ–ø–µ—Ç—ñ–≤–∫–∞', 'shepitivka'), Markup.button.callback('–º. –°—Ç–∞—Ä–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤', 'starokostantiniv')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'cherkassyReg':
                ctx.session.region = '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ß–µ—Ä–∫–∞—Å–∏', 'cherkasu'), Markup.button.callback('–º. –í–∞—Ç—É—Ç—ñ–Ω–µ', 'vatutine'), Markup.button.callback('–º. –ö–∞–Ω—ñ–≤', 'kaniv')],
                        [Markup.button.callback('–º. –ó–æ–ª–æ—Ç–æ–Ω–æ—à–∞', 'zolotonosha'), Markup.button.callback('–º. –°–º—ñ–ª–∞', 'smila'), Markup.button.callback('–º. –£–º–∞–Ω—å', 'uman')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'chernivtsiReg':
                ctx.session.region = '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ß–µ—Ä–Ω—ñ–≤—Ü—ñ', 'chernivtsi'), Markup.button.callback('–º. –ù–æ–≤–æ–¥–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫', 'novodnisrovsk')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            case 'chernihivReg':
                ctx.session.region = '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª';
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üìç', {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.callback('–º. –ß–µ—Ä–Ω—ñ–≥—ñ–≤', 'chernihiv'), Markup.button.callback('–º. –ù—ñ–∂–∏–Ω', 'nizin')],
                        [Markup.button.callback('–º. –ù–æ–≤–≥–æ—Ä–æ–¥-–°—ñ–≤–µ—Ä—Å—å–∫–∏–π', 'novgorod-siversky'), Markup.button.callback('–º. –ü—Ä–∏–ª—É–∫–∏', 'prylyki')],
                        [Markup.button.callback('–Ü–Ω—à–µ', 'other')]
                    ])
                });
                break;

            default:
                break;
        }

        return ctx.wizard.next();
    },
    async (ctx) => {
        const cities = require('../info/cities');
        await ctx.answerCbQuery();

        if(ctx.session.region !== '–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º') {
            const chosenCity = ctx.update.callback_query.data;
            ctx.session.city = cities[chosenCity];

            await ctx.editMessageReplyMarkup(null);
        }
        const userPlace = `${ctx.session.region === '–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º' ? `${ctx.session.region}` : `${ctx.session.region}|${ctx.session.city}`}`;
        const userTgId = ctx.update.callback_query.from.id;
        const curDate = new Date();

        await ctx.reply(
            `‚úÖ <b><u>–ù–∞–¥–∞–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</u></b>\nüïí ${curDate.getUTCDate()}/${curDate.getUTCMonth() + 1}/${curDate.getUTCFullYear()} ${curDate.getUTCHours()}:${curDate.getUTCMinutes()} (UTC)\nüó∫Ô∏è <b><u>–ú—ñ—Å—Ü–µ:</u></b> ${ctx.session.region}\n${ctx.session.city ? `üìç <b><u>–ú—ñ—Å—Ç–æ:</u></b> ${ctx.session.city}` : ''}`, {
                parse_mode: 'HTML',
            });

        await dbService.insertUserCheck(userTgId, userPlace);
        await dbService.setSkippedPoll(userTgId, 0);

        const pollSender = require('../sendPoll');
        const groupId = (await dbService.getUserByTelegramId(userTgId))[0].user_groups[0];
        await pollSender.editGroupPoll(ctx, groupId);

        return ctx.scene.leave();
    }
)